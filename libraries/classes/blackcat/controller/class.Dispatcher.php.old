<?php
/**
 * BlackCat PHP 5 Framework
 *
 * Last updated: June 05, 2010, 11:40 PM
 *
 * @package   controller
 * @author    Lorensius W. L. T <lorenz@londatiga.net>
 * @version   1.0
 * @copyright Copyright (c) 2010 Lorensius W. L. T
 */

/**
 * Loader class
 */
require_once(CLASS_DIR . '/blackcat/system/class.Loader.php');

/**
 * Loader class
 */
require_once(CLASS_DIR . '/blackcat/view/class.View.php');

/**
 * SystemException class
 */
require_once(CLASS_DIR . '/blackcat/system/class.SystemException.php');

/**
 * Dispatcher class
 *
 * @package   controller
 * @author    Lorensius W. L. T <lorenz@londatiga.net>
 * @version   1.0
 * @copyright Copyright (c) 2010 Lorensius W. L. T
 *
 */
class Dispatcher
{
    /**
     * Controller
     *
     * @var string
     */
    private $_controller;

    /**
     * Action
     *
     * @var string
     */
    private $_action;

    /**
     * Response type, xml or json
     *
     * @var string
     */
    private $_response;

    /**
     * Dispatch url
     *
     * @return void
     */
    public function dispatch() {
        
        $url = $_GET['url'];

        $this->_parseURL($url);

        if (empty($this->_controller)) $this->_controller = 'Home';

        $name              = $this->_controller;
        $this->_controller = $this->_controller . 'Controller';

        try {
            Loader::loadClass(ucfirst($this->_controller) , ROOT_DIR . '/controllers');

            if (class_exists($this->_controller)) {
                
                $controllerObj  = new $this->_controller;

                $controllerObj->setResponse($this->_response);
                $controllerObj->setName(strtolower($name));
                $controllerObj->setParams(strtolower($this->_params));

                if (method_exists($controllerObj, $this->_action)) {
                    $action = $this->_action;
                    $out    = $controllerObj->$action();
                } else {
                    $out    = $controllerObj->index();
                }
            } else {
                $this->pageNotFound();

                Error::store('Controller', 'Controller class <i>' . $this->_controller . '</i> not found!');
            }

            echo $out;
        } catch (SystemException $e) {
            $this->pageNotFound();

            Error::store('Controller', 'Controller file <i>' . $this->_controller . '</i> not found!');
        }
    }

    /**
     * Parse URL
     *
     * @return void
     */
    private function _parseURL($url)
    {
        $turl = $url;

        if (strpos($url, '.')) {
            $turl       = substr($url, 0, strpos($url, '.'));
            $response   = substr($url, strpos($url, '.') + 1);
        }

        $route = Router::get('/' . $turl);

        if (!empty($route)) {
            if (!empty($route['controller'])) $this->_controller = $route['controller'];

            if (!empty($route['action'])) $this->_action = $route['action'];

            $this->_response = $response;
        } else {
            $url = strtolower($url);

            if (strpos($url, "/") === FALSE) {
                $this->_controller = $url;

                if (strpos($url, ".")) {
                    $urls = explode(".", $url);

                    $this->_controller = $urls[0];
                    $this->_response   = $urls[1];
                }
            } else {
                $urls               = explode("/", $url);

                $this->_controller  = $urls[0];
                $this->_action      = '';
                $this->_response    = '';

                if (sizeof($urls) > 1) {
                    $action         = $urls[1];
                    $this->_action  = $action;

                    if (strpos($action, ".")) {
                        $actions            = explode(".", $action);

                        $this->_action      = $actions[0];
                        $this->_response    = $actions[1];
                    } else {
                        if ($action == 'xml' || $action == 'json')
                            $this->_response = $action;
                        else
                            $this->_action = $action;
                    }
                }
            }
        }
    }

    /**
     * Show page not found
     *
     * @return void
     */
    private function pageNotFound()
    {
        global $cfg;

        $view = new View();

        $view->setPath(THEME_DIR . '/' . $cfg['sys']['theme'] . '/templates');
        $view->setTemplate('page_not_found');
        $view->parse();

        $view->render();
    }
}

?>